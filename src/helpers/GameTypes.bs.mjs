// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Schema from "./Schema.bs.mjs";
import * as Database from "./Database.bs.mjs";
import * as Database$1 from "firebase/database";

var gameTypeSchema = Schema.object(function (s) {
      return {
              name: s.f("name", Schema.string)
            };
    });

var gameTypesSchema = Schema.array(gameTypeSchema);

var bucket = "gameTypes";

async function fetchGameTypes() {
  var gameTypesRef = Database$1.ref(Database.database, bucket);
  var data = await Database$1.get(gameTypesRef);
  var data$1 = data.val();
  if (data$1 == null) {
    return [];
  }
  var gameTypes = Schema.parseWith(data$1, gameTypesSchema);
  if (gameTypes.TAG === "Ok") {
    return gameTypes._0;
  } else {
    return [];
  }
}

function useGameTypes() {
  var match = React.useState(function () {
        return [];
      });
  var setGameTypes = match[1];
  var gameTypesRef = Database$1.ref(Database.database, bucket);
  React.useEffect((function () {
          return Database$1.onValue(gameTypesRef, (function (snapshot) {
                        var newGameTypes = [];
                        snapshot.forEach(function (snap) {
                              var data = snap.val();
                              if (data == null) {
                                return ;
                              }
                              var gameType = Schema.parseWith(data, gameTypeSchema);
                              if (gameType.TAG === "Ok") {
                                newGameTypes.push(gameType._0);
                                return ;
                              }
                              console.error(gameType._0);
                            });
                        setGameTypes(function (param) {
                              return newGameTypes;
                            });
                      }), undefined);
        }), [setGameTypes]);
  return match[0];
}

export {
  gameTypeSchema ,
  gameTypesSchema ,
  bucket ,
  fetchGameTypes ,
  useGameTypes ,
}
/* gameTypeSchema Not a pure module */
