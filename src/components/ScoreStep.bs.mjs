// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Elo from "../helpers/Elo.bs.mjs";
import * as Games from "../helpers/Games.bs.mjs";
import * as Stats from "../helpers/Stats.bs.mjs";
import * as React from "react";
import * as Button from "./Button.bs.mjs";
import * as Header from "./Header.bs.mjs";
import * as Players from "../helpers/Players.bs.mjs";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as GameTypes from "../helpers/GameTypes.bs.mjs";
import * as LoggerStep from "../helpers/LoggerStep.bs.mjs";
import * as Mattermost from "../helpers/Mattermost.bs.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.mjs";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";
import * as JsxRuntime from "react/jsx-runtime";

function ScoreStep(props) {
  var setSelectedGame = props.setSelectedGame;
  var selectedGame = props.selectedGame;
  var players = props.players;
  var setEarnedPoints = props.setEarnedPoints;
  var setRedState = props.setRedState;
  var redState = props.redState;
  var setBlueState = props.setBlueState;
  var blueState = props.blueState;
  var setStep = props.setStep;
  var selectedUsers = props.selectedUsers;
  var match = React.useState(function () {
        return false;
      });
  var setIsSaving = match[1];
  var redButtons = [];
  var blueButtons = [];
  for(var x = 0; x <= 7; ++x){
    var str = x.toString();
    redButtons.push(JsxRuntime.jsx(Button.make, {
              className: "!rounded-full w-[100px] h-[100px] !text-5xl font-semibold",
              variant: redState === x ? "Red" : "Grey",
              onClick: (function(x){
              return function (param) {
                setRedState(function (param) {
                      return x;
                    });
              }
              }(x)),
              children: str
            }, str));
    blueButtons.push(JsxRuntime.jsx(Button.make, {
              className: "!rounded-full w-[100px] h-[100px] !text-5xl font-semibold",
              variant: blueState === x ? "Blue" : "Grey",
              onClick: (function(x){
              return function (param) {
                setBlueState(function (param) {
                      return x;
                    });
              }
              }(x)),
              children: str
            }, str));
  }
  var winner = Belt_MapString.findFirstBy(selectedUsers, (function (param, value) {
          return value === "Blue";
        }));
  var winner$1 = winner !== undefined ? Core__Option.getExn(Players.playerByKey(players, winner[0])).name : "";
  var loser = Belt_MapString.findFirstBy(selectedUsers, (function (param, value) {
          return value === "Red";
        }));
  var loser$1 = loser !== undefined ? Core__Option.getExn(Players.playerByKey(players, loser[0])).name : "";
  var selectedBlueUsers = Belt_MapString.keysToArray(Belt_MapString.keep(selectedUsers, (function (param, value) {
              return value === "Blue";
            })));
  var selectedRedUsers = Belt_MapString.keysToArray(Belt_MapString.keep(selectedUsers, (function (param, value) {
              return value === "Red";
            })));
  var redPlayers = selectedRedUsers.map(function (key) {
        return Core__Option.getExn(Players.playerByKey(players, key));
      });
  var bluePlayers = selectedBlueUsers.map(function (key) {
        return Core__Option.getExn(Players.playerByKey(players, key));
      });
  var sendCreepsUpdate = function (extra, extra$1, extra$2) {
    return Mattermost.sendCreepsUpdate(bluePlayers, redPlayers, extra, extra$1, extra$2);
  };
  var saveGame = async function (selectedGame) {
    setIsSaving(function (param) {
          return true;
        });
    await Games.addGame({
          blueScore: 1,
          redScore: 0,
          blueTeam: selectedBlueUsers,
          redTeam: selectedRedUsers,
          game: selectedGame,
          date: new Date(),
          modifiers: redPlayers.length === 1 && bluePlayers.length === 1 ? ["OneVOne"] : []
        });
    var winningTeam = "Blue";
    var redPlayers$1 = selectedRedUsers.map(function (key) {
          return Core__Option.getExn(Players.playerByKey(players, key));
        });
    var bluePlayers$1 = selectedBlueUsers.map(function (key) {
          return Core__Option.getExn(Players.playerByKey(players, key));
        });
    var match;
    if (winningTeam === "Blue") {
      match = Elo.calculateScore(bluePlayers$1, redPlayers$1);
    } else {
      var match$1 = Elo.calculateScore(redPlayers$1, bluePlayers$1);
      match = [
        match$1[1],
        match$1[0],
        match$1[2]
      ];
    }
    var roundedPoints = Elo.roundScore(match[2]);
    setEarnedPoints(function (param) {
          return roundedPoints;
        });
    await Promise.all(match[0].map(async function (player) {
              return Players.updateGameStats(player.key, 1, 0, "Blue", player.elo);
            }));
    await Promise.all(match[1].map(async function (player) {
              return Players.updateGameStats(player.key, 0, 1, "Red", player.elo);
            }));
    await Stats.updateStats(0, 1);
    await sendCreepsUpdate(1, 0, roundedPoints);
    setIsSaving(function (param) {
          return false;
        });
    return setStep(function (step) {
                return LoggerStep.getNextStep(step);
              });
  };
  var gameTypes = GameTypes.useGameTypes().map(function (gameType) {
        return JsxRuntime.jsx(Button.make, {
                    variant: Caml_obj.equal(selectedGame, gameType.name) ? "Blue" : "Grey",
                    onClick: (function (param) {
                        setSelectedGame(function (param) {
                              return gameType.name;
                            });
                      }),
                    children: gameType.name
                  }, gameType.name);
      });
  return JsxRuntime.jsxs(JsxRuntime.Fragment, {
              children: [
                JsxRuntime.jsx(Header.make, {
                      step: "ScoreForm",
                      onNextStep: (function () {
                          if (selectedGame !== undefined) {
                            saveGame(selectedGame);
                            return ;
                          }
                          
                        }),
                      onReset: props.reset,
                      disabled: match[0] || Core__Option.isNone(selectedGame),
                      setShowQueueButtons: (function (param) {
                          
                        })
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("h2", {
                              children: [
                                "In welk spel heeft ",
                                JsxRuntime.jsx("span", {
                                      children: winner$1,
                                      className: "font-bold"
                                    }),
                                " van ",
                                JsxRuntime.jsx("span", {
                                      children: loser$1,
                                      className: "font-bold"
                                    }),
                                " gewonnen?"
                              ],
                              className: "text-3xl"
                            }),
                        JsxRuntime.jsx("div", {
                              children: gameTypes,
                              className: "flex flex-col gap-5 max-w-80 mt-4"
                            })
                      ],
                      className: "content-padding"
                    })
              ]
            });
}

var make = ScoreStep;

export {
  make ,
}
/* Games Not a pure module */
