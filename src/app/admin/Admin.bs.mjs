// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Stats from "../../helpers/Stats.bs.mjs";
import * as React from "react";
import * as Button from "../../components/Button.bs.mjs";
import * as Players from "../../helpers/Players.bs.mjs";
import * as Database from "../../helpers/Database.bs.mjs";
import * as LoginForm from "./LoginForm.bs.mjs";
import Link from "next/link";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.mjs";
import * as Auth from "firebase/auth";
import * as JsxRuntime from "react/jsx-runtime";

function Admin(props) {
  var user = Database.useUser();
  var match = React.useState(function () {
        return "";
      });
  var setUpdate = match[1];
  var players = Players.useAllPlayers(undefined, undefined);
  var content;
  if (user === null || user === undefined) {
    content = JsxRuntime.jsx(LoginForm.make, {});
  } else {
    var email = Core__Option.getOr(Caml_option.nullable_to_opt(user.email), "??@??");
    var name = Core__Option.getOr(Caml_option.nullable_to_opt(user.displayName), email);
    content = JsxRuntime.jsxs("div", {
          children: [
            "Welcome, " + name,
            JsxRuntime.jsx("h2", {
                  children: "Actions",
                  className: "py-2 text-xl font-semibold"
                }),
            JsxRuntime.jsx("div", {
                  children: match[0],
                  className: "text-green-300 py-2"
                }),
            JsxRuntime.jsxs("div", {
                  children: [
                    JsxRuntime.jsx(Button.make, {
                          variant: "Grey",
                          onClick: (function (param) {
                              setUpdate(function (param) {
                                    return "Recalculating...";
                                  });
                              Stats.recalculateStats().then(function (param) {
                                    setUpdate(function (param) {
                                          return "Recalculating finished";
                                        });
                                    return Promise.resolve();
                                  });
                            }),
                          children: "Recalculate scores & stats"
                        }),
                    JsxRuntime.jsx(Button.make, {
                          variant: "Grey",
                          onClick: (function (param) {
                              Auth.signOut(Database.auth);
                            }),
                          children: "Logout"
                        })
                  ],
                  className: "flex gap-4"
                }),
            JsxRuntime.jsxs("details", {
                  children: [
                    JsxRuntime.jsx("summary", {
                          children: "Players",
                          className: "p-2 bg-white/5 mt-2 hover:bg-white/10 select-none rounded"
                        }),
                    JsxRuntime.jsxs("table", {
                          children: [
                            JsxRuntime.jsx("thead", {
                                  children: JsxRuntime.jsxs("tr", {
                                        children: [
                                          JsxRuntime.jsx("th", {
                                                children: "Name"
                                              }),
                                          JsxRuntime.jsx("th", {
                                                children: "Mattermost Handle"
                                              }),
                                          JsxRuntime.jsx("th", {
                                                children: "Actions"
                                              })
                                        ]
                                      })
                                }),
                            JsxRuntime.jsx("tbody", {
                                  children: players.map(function (player) {
                                        return JsxRuntime.jsxs("tr", {
                                                    children: [
                                                      JsxRuntime.jsx("td", {
                                                            children: player.name
                                                          }),
                                                      JsxRuntime.jsx("td", {
                                                            children: Core__Option.getOr(player.mattermostHandle, "Undefined")
                                                          }),
                                                      JsxRuntime.jsx("td", {
                                                            children: JsxRuntime.jsx("button", {
                                                                  children: "Set MH",
                                                                  className: "bg-slate-300 rounded py-1 px-3 text-black",
                                                                  onClick: (function (param) {
                                                                      var handle = prompt("New handle");
                                                                      Players.writePlayer({
                                                                            name: player.name,
                                                                            wins: player.wins,
                                                                            losses: player.losses,
                                                                            absoluteWins: player.absoluteWins,
                                                                            absoluteLosses: player.absoluteLosses,
                                                                            games: player.games,
                                                                            teamGoals: player.teamGoals,
                                                                            teamGoalsAgainst: player.teamGoalsAgainst,
                                                                            blueGames: player.blueGames,
                                                                            redGames: player.redGames,
                                                                            blueWins: player.blueWins,
                                                                            redWins: player.redWins,
                                                                            elo: player.elo,
                                                                            lastEloChange: player.lastEloChange,
                                                                            key: player.key,
                                                                            mattermostHandle: (handle == null) ? undefined : Caml_option.some(handle),
                                                                            lastGames: player.lastGames,
                                                                            hidden: player.hidden,
                                                                            gameTypes: player.gameTypes
                                                                          });
                                                                    })
                                                                }),
                                                            className: "flex gap-2"
                                                          })
                                                    ]
                                                  }, player.key);
                                      })
                                })
                          ]
                        })
                  ]
                })
          ]
        });
  }
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("h1", {
                      children: [
                        JsxRuntime.jsx(Link, {
                              href: "/",
                              children: "‚Üê Back - ",
                              className: "font-thin"
                            }),
                        "Admin dashboard"
                      ],
                      className: "text-3xl pb-2 font-bold"
                    }),
                content
              ],
              className: "bg-blobs bg-darkbg bg-no-repeat bg-left text-white flex flex-col min-h-screen w-full p-10"
            });
}

var make = Admin;

export {
  make ,
}
/* Stats Not a pure module */
